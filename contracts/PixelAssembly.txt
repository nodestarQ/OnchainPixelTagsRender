// SPDX-License-Identifier: MIT
// www.PixelRoyale.xyz
pragma solidity ^0.8.15;

import "@openzeppelin/contracts/utils/Strings.sol";

library PixelAssembly {
    
    //---------- ACCESSORY ASSEMBLY - WITH ACCESSORY SVGs ----------//
    function buildWarrior(string[7] memory tValues, uint32 seed, bool status, uint256 _tokenId, bool seeded) public pure returns (bytes memory _img, bytes memory _json) {
        //---------- Metadata Snippets ----------//
        string memory comb0 = '","description": "4444 On-Chain PixelRoyale warriors are fighting for honor and glory on the Ethereum Blockchain! Well, for that and for an Eth prize pool! Mint, attack and survive to emerge victorious and win the jackpot!","external_url": "http://pixelroyale.xyz/","attributes": [{"trait_type": "Background","value": "';
        string memory comb9 = '"},{"trait_type": "Status","value": "'; // ALive or Missing in action
        string memory sComb9 = '"},{"trait_type": "Killer","value": "';
        string[10] memory comb1 = [comb0,'"},{"trait_type": "Model Number","value": "','"},{"trait_type": "Soul","value": "','"},{"trait_type": "Hair","value": "','"},{"trait_type": "Shirt","value": "','"},{"trait_type": "Backpack","value": "','"},{"trait_type": "Helmet","value": "','"},{"trait_type": "Weapon","value": "',comb9,sComb9];
        //Start JSON and SVG Generation by creating file headers
        bytes memory json = abi.encodePacked('{"name": "Pixel Tag #',Strings.toString(_tokenId)); // --> JSON HEADER
        bytes memory img = abi.encodePacked('<svg xmlns="http://www.w3.org/2000/svg" witdh="640" height="640" viewBox="0 0 16 16">'); // --> SVG HEADER

        string[4] memory tA6 = ["Pew Pew", "Dual Wield", "Stabby", "Say Hello To My Little Friend"];
        seeded ? tValues[6] = tA6[seed%4] : tValues[6] = "Bare Handed"; //weapon

        // ----- JSON ASSEMBLY ------//
        json = abi.encodePacked(json,comb1[0],tValues[0]); //bg
        json = abi.encodePacked(json,comb1[1],tValues[1]); //model
        json = abi.encodePacked(json,comb1[2],tValues[2]); //soul
        json = abi.encodePacked(json,comb1[3],tValues[3]); //hair
        json = abi.encodePacked(json,comb1[4],tValues[2]); //shirt
        json = abi.encodePacked(json,comb1[5],tValues[4]); //backpack
        json = abi.encodePacked(json,comb1[6],tValues[5]); //helmet
        json = abi.encodePacked(json,comb1[7],tValues[6]); //weapon
        json = abi.encodePacked(json,comb1[8],tValues[6]); //status

        // ----- SVG ASSEMBLY ------//
        //BACKGROUND//
        img = abi.encodePacked(img, '<rect x="0" y="0" width="16" height="16" fill="hsl(',tValues[0],',100%,90%)"/>');
        //SHIRT
        img = abi.encodePacked(img, '<rect x="5" y="13" width="6" height="3" fill="hsl(',tValues[2],',90%,50%)"/><rect x="5" y="13" width="1" height="3" fill="hsl(',tValues[2],',90%,40%)"/>');
        //MODEL// 
        img = abi.encodePacked(img, '<polygon points="5,13 5,12 4,12 4,11 3,11 3,7 13,7 13,11 12,11 12,12 13,12 12,12 11,12 11,13 " fill="hsl(',tValues[1],',50%,80%)"/><polygon points="5,13 5,12 4,12 4,11 3,11 3,7 4,7 4,11 5,11 5,12 6,12 6,13" fill="hsl(',tValues[1],',50%,70%)"/><polygon points="7,15 12,15 12,16 11,16 11,15 7,15 7,16 6,16 6,15" fill="hsl(',tValues[1],',50%,80%)"/>');
        //HAIR
        img = abi.encodePacked(img, '<polygon points="4,7 13,7 13,8 11,8 11,7 9,7 9,8 8,8 8,7 7,7 7,8 6,8 6,7 4,7 4,8 3,8 3,7" fill="hsl(',tValues[3],',80%,60%)"/>');
        //HELMET
        img = abi.encodePacked(img, '<polygon points="1,7 1,5 2,5 2,3 3,3 3,2 4,2 4,1 12,1 12,2 13,2 13,3 14,3 14,5 15,5 15,7 14,7 14,11 13,11 13,12 12,12 12,11 13,11 13,7 3,7 3,11 4,11 4,12 3,12 3,11 2,11 2,7" fill="hsl(',tValues[5],',80%,40%"/><polygon points="2,6 2,5 3,5 3,3 4,3 4,3 4,3 4,2 12,2 12,3 13,3 13,3 13,3 13,5 14,5 14,6" fill="hsl(',tValues[5],',70%,50%)"/><polygon points="2,6 2,5 3,5 3,4 4,4 4,5 5,5 5,6 " fill="hsl(',tValues[5],',80%,80%)"/><polygon points="6,6 6,5 7,5 7,4 8,4 8,6" fill="hsl(',tValues[5],',80%,80%)"/><polygon points="9,6 9,5 11,5 11,6" fill="hsl(',tValues[5],',80%,80%)"/><polygon points="13,5 12,5 12,3 13,3 13,5 14,5 14,6 13,6 " fill="hsl(',tValues[5],',80%,80%)"/>');
        //BACKPACK
        img = abi.encodePacked(img, '<polygon points="3,16 3,14 4,14 4,13 5,13 5,16" fill="hsl(',tValues[4],',70%,30%)"/>');
        //EYES
        img = abi.encodePacked(img, '<polygon points="5,8 11,8 11,10 9,10 9,8 7,8 7,10 5,10 " fill="hsl(0,0%,0%)"/><polygon points="5,8 6,8 7,8 10,8 11,8 10,8 10,9 9,9 9,8 6,8 6,9 5,9" fill="hsl(0,100%,100%)"/>');
        //MOUTH
        img = abi.encodePacked(img, '<rect x="8" y="11" width="1" height="1" fill="hsl(0,0%,0%)"/>');
        //DIRT
        if(status) {
            img = abi.encodePacked(img, '<rect x="4" y="7" width="1" height="1" fill="hsl(50,30%,30%)"/><rect x="3" y="8" width="1" height="1" fill="hsl(50,30%,30%)"/><rect x="7" y="8" width="1" height="1" fill="hsl(50,30%,30%)"/><rect x="12" y="8" width="1" height="1" fill="hsl(50,30%,30%)"/><rect x="11" y="10" width="1" height="1" fill="hsl(50,30%,30%)"/><rect x="10" y="12" width="1" height="1" fill="hsl(50,30%,30%)"/><rect x="5" y="12" width="1" height="1" fill="hsl(50,30%,30%)"/><rect x="4" y="11" width="1" height="1" fill="hsl(50,30%,30%)"/>');
        }
        //WEAPON
        if (keccak256(abi.encodePacked(tValues[6])) == keccak256(abi.encodePacked("Bare Handed"))) {
                img = abi.encodePacked(img, '');
        }
        else if (keccak256(abi.encodePacked(tValues[6])) == keccak256(abi.encodePacked(tA6[0]))) {
                img = abi.encodePacked(img, '<polygon points="12,16 12,14 15,14 15,15 13,15 13,16" fill="hsl(0,0%,0%)"/>');
        }
        else if (keccak256(abi.encodePacked(tValues[6])) == keccak256(abi.encodePacked(tA6[1]))) {
                img = abi.encodePacked(img, '<polygon points="12,16 12,14 15,14 15,15 13,15 13,16" fill="hsl(0,0%,0%)"/><polygon points="7,16 7,14 10,14 10,15 8,15 8,16" fill="hsl(0,0%,0%)"/>');
        }
        else if (keccak256(abi.encodePacked(tValues[6])) == keccak256(abi.encodePacked(tA6[2]))) {
                img = abi.encodePacked(img, '<rect x="5" y="14" width="3" height="1" fill="hsl(0,0%,0%)"/><rect x="6" y="12" width="1" height="2" fill="hsl(0,0%,75%)"/>');
        }
        else if (keccak256(abi.encodePacked(tValues[6])) == keccak256(abi.encodePacked(tA6[3]))) {
                img = abi.encodePacked(img, '<polygon points="5,13 6,13 11,13 11,12 12,12 12,13 14,13 14,14 12,14 12,15 11,15 8,15 8,16 7,16 7,15 6,15 6,14 5,14" fill="hsl(0,0%,0%)"/><rect x="9" y="14" width="2" height="1" fill="hsl(5,80%,30%)"/>');
        }
        return (_img=img, _json=json);
    }
}